<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis知识点</title>
    <url>/2022/09/04/Redis%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="Redis相关知识点"><a href="#Redis相关知识点" class="headerlink" title="Redis相关知识点"></a>Redis相关知识点</h1><h2 id="java-lua脚本实现限流"><a href="#java-lua脚本实现限流" class="headerlink" title="java+lua脚本实现限流"></a>java+lua脚本实现限流</h2><p>首先配置RedisScript</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> DefaultRedisScript&lt;Boolean&gt; <span class="title function_">defaultRedisScript</span><span class="params">()</span> &#123;</span><br><span class="line">    DefaultRedisScript&lt;Boolean&gt; script = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//指定resourece下的lua脚本</span></span><br><span class="line">    <span class="type">ClassPathResource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;limit.lua&quot;</span>);</span><br><span class="line">    script.setLocation(resource);</span><br><span class="line">    script.setResultType(Boolean.class);</span><br><span class="line">    <span class="keyword">return</span> script;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编写lua脚本</p>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 获取传入的key名</span></span><br><span class="line"><span class="keyword">local</span> bizKey = KEYS[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 获取限流阈值</span></span><br><span class="line"><span class="keyword">local</span> limit = <span class="built_in">tonumber</span>(ARGV[<span class="number">1</span>])</span><br><span class="line"><span class="comment">-- 获取当前key的value,不存在则为0</span></span><br><span class="line"><span class="keyword">local</span> count = <span class="built_in">tonumber</span>(redis.call(<span class="string">&#x27;get&#x27;</span>, bizKey) <span class="keyword">or</span> <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 若到达阈值返回false,反之value递增,设置过期时间</span></span><br><span class="line"><span class="keyword">if</span> count + <span class="number">1</span> &gt; limit <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">local</span> incr = redis.call(<span class="string">&#x27;incrby&#x27;</span>, bizKey, <span class="number">1</span>)</span><br><span class="line"> </span><br><span class="line">    <span class="comment">-- 如果是第一次自增,设置过期时间</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">tonumber</span>(incr) == <span class="number">1</span> <span class="keyword">then</span></span><br><span class="line">    	redis.call(<span class="string">&#x27;expire&#x27;</span>, bizKey, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>


<p>在需要限流的业务代码前调用该方法，根据传入阈值对调用做限制</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisAccessLimitService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisScript&lt;Boolean&gt; redisScript;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> key 限流的redis key名称</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> limit 请求上限数</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">limit</span><span class="params">(String key, Integer limit)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">acquire</span> <span class="operator">=</span> redisTemplate.execute(redisScript, Lists.newArrayList(key), limit.toString());</span><br><span class="line">        <span class="comment">//抛出异常</span></span><br><span class="line">        AssertUtil.isFalse(Boolean.TRUE.equals(acquire), <span class="string">&quot;500&quot;</span>, <span class="string">&quot;限流了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Java知识点</title>
    <url>/2022/08/21/Java%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="Java-SE模块知识点"><a href="#Java-SE模块知识点" class="headerlink" title="Java SE模块知识点"></a>Java SE模块知识点</h1><p>这篇文章主要记录java基础中一些值得记录知识点。代码不涉及Web，框架，三方库。</p>
<span id="more"></span>

<h2 id="JavaBean建造者模式"><a href="#JavaBean建造者模式" class="headerlink" title="JavaBean建造者模式"></a>JavaBean建造者模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chenxiubang.se;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenxiubang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0 2022-01-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 建造者模式不可变类理念:外部类域用final修饰,在构造方法中给属性赋值</span></span><br><span class="line"><span class="comment">     * 外部类实例化后不能通过set方法改变</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Double weight;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//建造者模式不可变类理念: 不应该有空参构造器，或者调用空参构造器抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;该类不能通过无参构造器初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全参构造器公私有区别不大</span></span><br><span class="line"><span class="comment">     * 直接调用全参构造器好处是省区建造者的过程，坏处是方法签名参数多的情况，使用者容易传参错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Dog</span><span class="params">(String name, Double weight, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.weight = weight;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 静态工厂方法，代替显示调用构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该静态内部类需声明public，才能被(依附的外部类之外的地方)使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 内部类构造器建议私有，通过外部类的静态工厂方法builder()调用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">Builder</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 应与外部类的属性一一相对</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> Double weight;</span><br><span class="line">        <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下方都是链式构建</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">name</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">weight</span><span class="params">(Double weight)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.weight = weight;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">age</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Dog <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">//方式一：调用外部类全参构造器</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="built_in">this</span>.name, <span class="built_in">this</span>.weight, <span class="built_in">this</span>.age);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//方式二：将内部类实例的引用作为参数，调用外部类的构造方法</span></span><br><span class="line">            <span class="comment">//return new Dog(this);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法二</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Dog</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="comment">//外部类可以直接访问内部类的私有属性</span></span><br><span class="line">        <span class="built_in">this</span>.name = builder.name;</span><br><span class="line">        <span class="built_in">this</span>.age = builder.age;</span><br><span class="line">        <span class="built_in">this</span>.weight = builder.weight;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供外部类的get方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getWeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, weight=&quot;</span> + weight +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 总而言之，建造者模式的的思想就是通过静态内部类来构建javaBean模型，再通过类全参构造器（或者传入构建者的构造器）方法一次性实例化不可变类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql知识点</title>
    <url>/2022/09/23/Mysql%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="Mysql相关知识点"><a href="#Mysql相关知识点" class="headerlink" title="Mysql相关知识点"></a>Mysql相关知识点</h1><h2 id="SQL语法易错点"><a href="#SQL语法易错点" class="headerlink" title="SQL语法易错点"></a>SQL语法易错点</h2><ol>
<li><p>and的优先级大于or</p>
<p>通俗理解，or查询会把条件分为左右两边来查</p>
<p>例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="number">0</span> <span class="keyword">or</span> id <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>该sql会查询id等于1且状态等于0的用户，或者id等于2的用户</p>
</li>
</ol>
<h2 id="Mysql千万级别数据分页查询写法"><a href="#Mysql千万级别数据分页查询写法" class="headerlink" title="Mysql千万级别数据分页查询写法"></a>Mysql千万级别数据分页查询写法</h2><p>当单表数据到<code>1000w</code>以上，使用普通的limit分页会遇到性能瓶颈，查询耗时极差</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM 表名 LIMIT 10000000,10</span><br></pre></td></tr></table></figure>

<p><strong>耗时：我测试耗约95-110s</strong></p>
<p>该查询方法的执行时间，还会继续随着偏移量的增加而变长</p>
<p>当数据量达到一定程度，我们需要改为以下写法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.<span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> 表名 a, ( <span class="keyword">SELECT</span> id <span class="keyword">FROM</span> 表名 LIMIT <span class="number">10000000</span>,<span class="number">10</span> ) tmp </span><br><span class="line"><span class="keyword">WHERE</span> a.id <span class="operator">=</span> tmp.id</span><br></pre></td></tr></table></figure>

<ul>
<li><p>通过limit只分页目标结果的<code>id</code>，并作为临时表</p>
</li>
<li><p>目标表和临时表通过id作为关联条件，连表查询</p>
</li>
</ul>
<p><strong>耗时：我测试耗时约1.8-3.5s</strong></p>
<span id="more"></span>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch知识点</title>
    <url>/2022/12/23/ElasticSearch%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h1 id="ElasticSearch相关知识点"><a href="#ElasticSearch相关知识点" class="headerlink" title="ElasticSearch相关知识点"></a>ElasticSearch相关知识点</h1><p>Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎</p>
<p>文档参考Elasticsearch版本：</p>
<ul>
<li>7.10.0</li>
<li>8.1.0</li>
</ul>
<h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="新增索引"><a href="#新增索引" class="headerlink" title="新增索引"></a>新增索引</h4><p>说明：新增索引只能使用put请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my-index</span><br></pre></td></tr></table></figure>



<p>说明：新增索引时自定义分片数、副本数</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my-index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;:&#123;</span><br><span class="line">        &quot;index&quot;:&#123;</span><br><span class="line">            &quot;number_of_shards&quot;:3,</span><br><span class="line">            &quot;number_of_replicas&quot;:2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>number_of_shards：分片数，默认为1</p>
<p>number_of_replicas：副本数，默认为1</p>
<p>上述可简化如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my-index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;:&#123;</span><br><span class="line">        &quot;number_of_shards&quot;:3,</span><br><span class="line">        &quot;number_of_replicas&quot;:2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>说明：新增索引时自定义映射</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my-index</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;:&#123;</span><br><span class="line">        &quot;properties&quot;:&#123;</span><br><span class="line">            &quot;字段1&quot;:&#123;</span><br><span class="line">                &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;字段2&quot;:&#123;</span><br><span class="line">                &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">                &quot;analyzer&quot;:&quot;ik_max_word&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>type：指定文档字段的数据类型</p>
<p>analyzer：指定文档字段使用的分词器</p>
<span id="more"></span>

<h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /my-index</span><br></pre></td></tr></table></figure>



<h4 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h4><p>说明：索引创建后很多参数是无法修改的，以下列举一些可以修改的参数</p>
<p>说明：修改索引副本数</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT	/my-index/_settings</span><br><span class="line">&#123;</span><br><span class="line">    &quot;settings&quot;:&#123;</span><br><span class="line">        &quot;index&quot;:&#123;</span><br><span class="line">            &quot;number_of_replicas&quot;:2</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>说明：修改索引映射</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my-index/_mapping</span><br><span class="line">&#123;</span><br><span class="line">    &quot;properties&quot;:&#123;</span><br><span class="line">        &quot;字段&quot;:&#123;</span><br><span class="line">            &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>索引中如果已经存在有该字段的文档，就不允许修改</li>
</ul>
<h4 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET	/my-index</span><br></pre></td></tr></table></figure>



<h4 id="索引是否存在"><a href="#索引是否存在" class="headerlink" title="索引是否存在"></a>索引是否存在</h4><p>说明：通过响应状态码检查索引是否存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HEAD /my-index</span><br></pre></td></tr></table></figure>

<p>200：索引存在</p>
<p>404：索引不存在</p>
<p>如果只是检查索引是否存在，使用该方式开销更小</p>
<h4 id="查询全部索引"><a href="#查询全部索引" class="headerlink" title="查询全部索引"></a>查询全部索引</h4><p>说明：查看当前elasticsearch中所有的索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET	/_cat/indices?v</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>该响应内容不是json格式</li>
</ul>
<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><h4 id="POST和PUT幂等性"><a href="#POST和PUT幂等性" class="headerlink" title="POST和PUT幂等性"></a>POST和PUT幂等性</h4><p>在HTTP协议中，POST是非幂等请求，PUT是幂等请求</p>
<p>每次调用POST请求，都将产生新的资源</p>
<p>每次调用PUT请求，会用数据替换服务器上的指定资源，多次调用只产生一次影响</p>
<h4 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h4><p>说明：</p>
<ul>
<li>新增文档使用post请求（推荐）</li>
<li>新增文档使用put请求</li>
</ul>
<p>post新增文档，例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /my-index/_doc/自定义id(可选)</span><br><span class="line">&#123;</span><br><span class="line">    &quot;字段1&quot;:&quot;值1&quot;,</span><br><span class="line">    &quot;字段2&quot;:&quot;值2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：post新增文档时，文档id若不指定，则使用ES自动生成的id</p>
<p>put新增文档，例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my-index/_doc/自定义id</span><br><span class="line">&#123;</span><br><span class="line">    &quot;字段1&quot;:&quot;值1&quot;,</span><br><span class="line">    &quot;字段2&quot;:&quot;值2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：put新增文档时，文档id必须指定</p>
<p>注意：</p>
<ul>
<li>上述put请求当指定id的文档已存在，就会全量替换该文档。</li>
</ul>
<h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /my-index/_doc/文档id</span><br></pre></td></tr></table></figure>



<h4 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h4><p>说明：修改文档可分为如下</p>
<ul>
<li>覆盖修改：本质为删除旧文档，然后重新创建新文档</li>
<li>局部修改：修改已有文档的局部字段</li>
</ul>
<p>覆盖修改，例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /my-index/_doc/文档id</span><br><span class="line">&#123;</span><br><span class="line">    &quot;字段1&quot;:&quot;值1&quot;,</span><br><span class="line">    &quot;字段2&quot;:&quot;值2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>若该id的文档原先不存在，就会创建文档</li>
</ul>
<p>局部修改，例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /my-index/_update/文档id</span><br><span class="line">&#123;</span><br><span class="line">    &quot;doc&quot;:&#123;</span><br><span class="line">        &quot;字段1&quot;:&quot;值1&quot;,</span><br><span class="line">        &quot;字段2&quot;:&quot;值2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="文档是否存在"><a href="#文档是否存在" class="headerlink" title="文档是否存在"></a>文档是否存在</h4><p>说明：通过响应状态码检查文档是否存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HEAD /my-index/_doc/文档id</span><br></pre></td></tr></table></figure>

<p>200：文档存在</p>
<p>404：文档不存在</p>
<p>如果只是检查文档是否存在，使用该方式开销更小</p>
<h4 id="文档批量处理"><a href="#文档批量处理" class="headerlink" title="文档批量处理"></a>文档批量处理</h4><p>说明：</p>
<ul>
<li><p>批量处理可以在一次http请求中执行批量的文档操作</p>
</li>
<li><p>一次批量处理可同时包含：批量新增、批量删除、批量更新</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123;&quot;create&quot;:&#123;&quot;_index&quot;:&quot;my-index&quot;,&quot;_id&quot;:&quot;新增文档id&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;字段1&quot;:&quot;值1&quot;,&quot;字段2&quot;:&quot;值2&quot;&#125;</span><br><span class="line">&#123;&quot;delete&quot;:&#123;&quot;_index&quot;:&quot;my-index&quot;,&quot;_id&quot;:&quot;删除文档id&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;update&quot;:&#123;&quot;_index&quot;:&quot;my-index&quot;,&quot;_id&quot;:&quot;更新文档id&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;doc&quot;:&#123;&quot;字段1&quot;:&quot;值1&quot;&#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>注意：</p>
<ul>
<li><p>请求体格式并非json	</p>
</li>
<li><p>行末的换行符不能省略</p>
</li>
</ul>
<h4 id="文档版本控制"><a href="#文档版本控制" class="headerlink" title="文档版本控制"></a>文档版本控制</h4><p>说明：</p>
<ul>
<li>版本控制发生在更新操作（包括局部更新、覆盖更新）</li>
<li>版本号字段<code>if_seq_no</code>与<code>if_primary_term</code>与文档符合的更新才能生效</li>
</ul>
<p>以覆盖更新举例，例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /my-index/_doc/文档id?if_seq_no=序列号&amp;if_primary_term=唯一号</span><br><span class="line">&#123;</span><br><span class="line">    &quot;字段1&quot;:&quot;值1&quot;,</span><br><span class="line">    &quot;字段2&quot;:&quot;值2&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="文档查询"><a href="#文档查询" class="headerlink" title="文档查询"></a>文档查询</h3><h4 id="keyword子类型"><a href="#keyword子类型" class="headerlink" title="keyword子类型"></a>keyword子类型</h4><p>说明：</p>
<p>通常情况下，elasticsearch自动生成的text类型字段有一个keyword子类型（如果是静态字段映射则需要自己手动指定）</p>
<p>keyword子类型在精确匹配、聚合、排序等场景都有很大作用</p>
<p>text：</p>
<ul>
<li>会分词，然后进行索引</li>
<li>支持模糊、精确查询</li>
<li>不支持聚合</li>
</ul>
<p>keyword：</p>
<ul>
<li><p>不进行分词，直接索引</p>
</li>
<li><p>支持模糊、精确查询</p>
</li>
<li><p>支持聚合</p>
</li>
</ul>
<h4 id="全部查询"><a href="#全部查询" class="headerlink" title="全部查询"></a>全部查询</h4><p>说明：查询索引下全部文档数据</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match_all&quot;:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>默认情况下，elasticsearch限制返回文档条数，默认只显示10条</li>
</ul>
<p>上述可简化如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br></pre></td></tr></table></figure>



<h4 id="id查询"><a href="#id查询" class="headerlink" title="id查询"></a>id查询</h4><p>说明：通过文档id查询文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_doc/文档id</span><br></pre></td></tr></table></figure>



<h4 id="多id查询"><a href="#多id查询" class="headerlink" title="多id查询"></a>多id查询</h4><p>说明：根据多个文档id查询多个文档</p>
<p>跨索引多id查询</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;my-index-001&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;1000&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_index&quot;: &quot;my-index-002&quot;,</span><br><span class="line">      &quot;_id&quot;: &quot;2000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>单个索引下多id查询</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;docs&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_id&quot;: &quot;1000&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;_id&quot;: &quot;2000&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>上述可简化如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_mget</span><br><span class="line">&#123;</span><br><span class="line">  &quot;ids&quot; : [&quot;1000&quot;, &quot;2000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="match-匹配查询"><a href="#match-匹配查询" class="headerlink" title="match 匹配查询"></a>match 匹配查询</h4><p>说明：</p>
<ul>
<li>match先对查询内容分词，再去匹配索引库查询</li>
<li>匹配的文档结果按照得分由高到低排序</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;文档字段&quot;:&quot;查询内容&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;文档字段&quot;:&#123;</span><br><span class="line">                &quot;query&quot;:&quot;查询内容&quot;,</span><br><span class="line">                &quot;operator&quot;:&quot;and&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>operator：匹配分词的规则</p>
<ul>
<li><p>or（默认）：至少匹配一个分词</p>
</li>
<li><p>and：需要匹配所有分词</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; :&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;文档字段&quot;: &#123;</span><br><span class="line">            	“query&quot;:&quot;查询内容&quot;,</span><br><span class="line">            	&quot;minimum_should_match&quot;:2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>minimum_should_match：指定至少需要匹配的分词个数（或者至少需要匹配的百分比：例如80%）</p>
<h4 id="match-phrase-短语查询"><a href="#match-phrase-短语查询" class="headerlink" title="match_phrase  短语查询"></a>match_phrase  短语查询</h4><p>说明：</p>
<ul>
<li>对查询内容分词，查找文档字段中值包含所有分词，且分词顺序一致，且分词连续的文档</li>
<li>匹配的文档结果按照得分由高到低排序</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match_phrase&quot;:&#123;</span><br><span class="line">            &quot;文档字段&quot;:&quot;查询内容&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match_phrase&quot;:&#123;</span><br><span class="line">            &quot;文档字段&quot;:&#123;</span><br><span class="line">                &quot;query&quot;:&quot;查询内容&quot;,</span><br><span class="line">                &quot;slop&quot;:1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>slop：分词后针对分词连续的规则，允许中间间隔其他分词的个数</p>
<h4 id="term-精确查询"><a href="#term-精确查询" class="headerlink" title="term 精确查询"></a>term 精确查询</h4><p>说明：</p>
<ul>
<li><p>精确匹配值：例如数字，日期，布尔值等</p>
</li>
<li><p>查询内容为文本时不进行分词，直接匹配索引库</p>
</li>
<li><p>term配置多值字段（如数组），只要匹配其中一个元素就算匹配</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;term&quot;:&#123;</span><br><span class="line">            &quot;字段名&quot;:&#123;</span><br><span class="line">                &quot;value&quot;:&quot;查询内容&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意：</p>
<ul>
<li><p>term不对查询文本分词，但文档字段内容可能是分词后保存在索引库，而不能完全匹配</p>
<p>此时可以使用keyword子类型，实现完全匹配</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;term&quot;:&#123;</span><br><span class="line">            &quot;字段名.keyword&quot;:&#123;</span><br><span class="line">                &quot;value&quot;:&quot;查询内容&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="terms-精确查询"><a href="#terms-精确查询" class="headerlink" title="terms 精确查询"></a>terms 精确查询</h4><p>说明：</p>
<ul>
<li><p>和term效果相同，可以传递多个查询内容</p>
</li>
<li><p>只要term匹配其中一个查询内容就算匹配</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;terms&quot;:&#123;</span><br><span class="line">            &quot;字段名&quot;:[</span><br><span class="line">                &quot;查询内容1&quot;,</span><br><span class="line">                &quot;查询内容2&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="range-范围查询"><a href="#range-范围查询" class="headerlink" title="range 范围查询"></a>range 范围查询</h4><p>说明：</p>
<ul>
<li><p>gt：大于</p>
</li>
<li><p>gte：大于等于</p>
</li>
<li><p>lt：小于</p>
</li>
<li><p>lte：小于等于</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;range&quot;:&#123;</span><br><span class="line">            &quot;文档字段&quot;:&#123;</span><br><span class="line">                &quot;gt&quot;:10,</span><br><span class="line">                &quot;lte&quot;:20</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="fuzzy-模糊查询"><a href="#fuzzy-模糊查询" class="headerlink" title="fuzzy 模糊查询"></a>fuzzy 模糊查询</h4><p>说明：通过模糊查询去匹配内容含错别字、多字、少字的文档</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;fuzzy&quot;:&#123;</span><br><span class="line">            &quot;字段名&quot;:&#123;</span><br><span class="line">                &quot;value&quot;:&quot;查询内容&quot;,</span><br><span class="line">                &quot;fuzziness&quot;:1,</span><br><span class="line">                &quot;prefix_length&quot;:0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>fuzziness：查询内容通过N次操作变成允许匹配索引库的查询内容，该值默认为0，最大为2。下列情况为1次操作：</p>
<ol>
<li>修改一个字符：<code>b</code>ox -&gt; <code>f</code>ox</li>
<li>移除一个字符：foo<code>t</code> -&gt; foo</li>
<li>插入一个字符：term -&gt; term<code>s</code></li>
<li>调换临近的两个字符：<code>ca</code>t -&gt; <code>ac</code>t</li>
</ol>
<p>prefix_length：查询内容和匹配内容的前N个字符必须匹配，默认为0</p>
<h4 id="exists-存在查询"><a href="#exists-存在查询" class="headerlink" title="exists 存在查询"></a>exists 存在查询</h4><p>说明：查询指定字段存在值（非null）的文档</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;exists&quot;:&#123;</span><br><span class="line">            &quot;field&quot;:&quot;字段名&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="bool-多条件查询"><a href="#bool-多条件查询" class="headerlink" title="bool 多条件查询"></a>bool 多条件查询</h4><p>说明：</p>
<ul>
<li><p>多条件查询，由一至多个子句的组成</p>
</li>
<li><p>子句类型有4种</p>
<ol>
<li><p>must：必须匹配，贡献算分</p>
</li>
<li><p>should：选择性匹配，贡献算分（如果没有must子句，should子句则至少满足一条匹配）</p>
</li>
<li><p>must_not：必须不匹配，不贡献算分</p>
</li>
<li><p>filter：必须匹配，不贡献算分</p>
</li>
</ol>
</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;must&quot;:[</span><br><span class="line">				...</span><br><span class="line">            ],</span><br><span class="line">            &quot;should&quot;:[</span><br><span class="line">				...</span><br><span class="line">            ],</span><br><span class="line">            &quot;minimum_should_match&quot;:1,</span><br><span class="line">            &quot;must_not&quot;:[</span><br><span class="line">				...</span><br><span class="line">            ],</span><br><span class="line">            &quot;filter&quot;:[</span><br><span class="line">				...</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>minimum_should_match：should子句至少需要匹配的个数</p>
<p>说明：</p>
<ul>
<li><p>各个子句中可使用DSL查询的语法，例如match、term、range等等</p>
</li>
<li><p>各个子句中可继续套用bool多条件查询</p>
</li>
</ul>
<h4 id="boost权重"><a href="#boost权重" class="headerlink" title="boost权重"></a>boost权重</h4><p>说明：</p>
<ul>
<li><p>通过指定一个boost值控制查询子句的相应权重，最终影响文档评分。</p>
</li>
<li><p>大部分query查询语法都能设置boost权重</p>
</li>
<li><p>boost默认值1</p>
</li>
</ul>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;bool&quot;:&#123;</span><br><span class="line">            &quot;must&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;match&quot;:&#123;</span><br><span class="line">                        &quot;字段值1&quot;:&#123;</span><br><span class="line">                            &quot;query&quot;:&quot;值1&quot;,</span><br><span class="line">                            &quot;boost&quot;:1.5</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;should&quot;:[</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;term&quot;:&#123;</span><br><span class="line">                        &quot;字段值2&quot;:&#123;</span><br><span class="line">                            &quot;value&quot;:&quot;值2&quot;,</span><br><span class="line">                            &quot;boost&quot;:2</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>说明：对查询的文档按某种规则排序</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;sort&quot;:[</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;文档字段&quot;:&#123;</span><br><span class="line">                &quot;order&quot;:&quot;desc&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<ul>
<li>text字段不能参与排序，可使用keyword子类型进行排序</li>
</ul>
<h4 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h4><p>常见聚合类型：</p>
<ul>
<li><p>terms：分组</p>
</li>
<li><p>sum：求和</p>
</li>
<li><p>avg：求平均值</p>
</li>
<li><p>max：求最大值</p>
</li>
<li><p>min：求最小值</p>
</li>
<li><p>top_hits：取前n条数据</p>
</li>
<li><p>再套用聚合操作</p>
</li>
</ul>
<p>不同聚合操作请求格式略有不同，但基本遵循如下</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;aggs&quot;:&#123;</span><br><span class="line">        &quot;自定义名称&quot;:&#123;</span><br><span class="line">            &quot;聚合类型&quot;:&#123;</span><br><span class="line">                &quot;field&quot;:&quot;聚合字段&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;size&quot;:0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>说明：默认聚合查询会查询不必要的文档数据，size设置为0不查询文档数据</p>
<p>注意：</p>
<ul>
<li>text字段不能参与聚合分组、排序，可使用keyword子类型聚合操作</li>
</ul>
<h4 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h4><p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;from&quot;:0,</span><br><span class="line">    &quot;size&quot;:10</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>from：起始文档序号（从0开始）</p>
<p>size：显示文档数</p>
<h4 id="文档高亮"><a href="#文档高亮" class="headerlink" title="文档高亮"></a>文档高亮</h4><p>说明：文档高亮需结合DSL查询。对文档中匹配上搜索内容的文本，通过增加html标签强化显示</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot;:&#123;</span><br><span class="line">        &quot;match&quot;:&#123;</span><br><span class="line">            &quot;文档字段&quot;:&quot;查询内容&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;highlight&quot;:&#123;</span><br><span class="line">        &quot;pre_tags&quot;:&quot;&lt;em&gt;&quot;,</span><br><span class="line">        &quot;post_tags&quot;:&quot;&lt;/em&gt;&quot;,</span><br><span class="line">        &quot;fields&quot;:&#123;</span><br><span class="line">            &quot;高亮字段&quot;:&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pre_tags：默认为em标签，加粗文本</p>
<p>post_tags：默认为em标签，加粗文本</p>
<h4 id="包含-x2F-排除字段"><a href="#包含-x2F-排除字段" class="headerlink" title="包含&#x2F;排除字段"></a>包含&#x2F;排除字段</h4><p>说明：返回文档需要的字段</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_source&quot;:&#123;</span><br><span class="line">        &quot;includes&quot;:[</span><br><span class="line">            &quot;字段1&quot;,</span><br><span class="line">            &quot;字段2&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;excludes&quot;:[</span><br><span class="line">            &quot;字段1&quot;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>includes：文档返回包含的字段</p>
<p>excludes：文档返回排除的字段</p>
<p>上述可简化如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /my-index/_search</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_source&quot;:[</span><br><span class="line">        &quot;字段1&quot;,</span><br><span class="line">        &quot;字段2&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>指定查询文档包含的字段</p>
<h3 id="索引模板（过时）"><a href="#索引模板（过时）" class="headerlink" title="索引模板（过时）"></a>索引模板（过时）</h3><p>说明：创建匹配索引模板规则的索引后，会自动为索引增加模板中预先定义的参数</p>
<p>注意：</p>
<ul>
<li>以下关于旧版索引模板，现已被弃用，将被 Elasticsearch 7.8 中引入的可组合模板取代</li>
</ul>
<h4 id="新增-x2F-修改模板"><a href="#新增-x2F-修改模板" class="headerlink" title="新增&#x2F;修改模板"></a>新增&#x2F;修改模板</h4><p>说明：新增&#x2F;修改模板可使用put、post请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PUT /_template/模板名称</span><br><span class="line">&#123;</span><br><span class="line">    &quot;index_patterns&quot;:[</span><br><span class="line">        &quot;test*&quot;,</span><br><span class="line">        &quot;bar*&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;settings&quot;:&#123;</span><br><span class="line">        &quot;number_of_shards&quot;:3</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mappings&quot;:&#123;</span><br><span class="line">        &quot;_source&quot;:&#123;</span><br><span class="line">            &quot;enabled&quot;:false</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;properties&quot;:&#123;</span><br><span class="line">            &quot;字段1&quot;:&#123;</span><br><span class="line">                &quot;type&quot;:&quot;keyword&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;字段2&quot;:&#123;</span><br><span class="line">                &quot;type&quot;:&quot;date&quot;,</span><br><span class="line">                &quot;format&quot;:&quot;EEE MMM dd HH:mm:ss Z yyyy&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>index_patterns：索引模板的匹配规则</p>
<h4 id="删除模板"><a href="#删除模板" class="headerlink" title="删除模板"></a>删除模板</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DELETE /_template/模板名称</span><br></pre></td></tr></table></figure>



<h4 id="查询模板"><a href="#查询模板" class="headerlink" title="查询模板"></a>查询模板</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_template/模板名称</span><br></pre></td></tr></table></figure>



<h3 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>说明：查看不同分词器对词条的分词情况</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /_analyze</span><br><span class="line">&#123;</span><br><span class="line">    &quot;analyzer&quot;:&quot;ik_max_word&quot;,</span><br><span class="line">    &quot;text&quot;:[&quot;我是一名程序员&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>analyzer：使用的分词器</p>
<p>常用分词器：</p>
<ul>
<li>standard：标准分词器</li>
<li>ik_smart：ik默认分词器</li>
<li>ik_max_word：ik最细粒度分词器</li>
</ul>
<h4 id="安装ik分词器"><a href="#安装ik分词器" class="headerlink" title="安装ik分词器"></a>安装ik分词器</h4><p>说明：ik分词器是elasticsearch最常用的中文分词器</p>
<p>下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p>
<p>注意：</p>
<ul>
<li>分词器版本需要和当前elasticsearch版本对应</li>
</ul>
<p>安装步骤：</p>
<ol>
<li><p>进入elasticsearch的根目录的plugins目录</p>
</li>
<li><p>创建ik文件夹（文件夹名字自定义）</p>
</li>
<li><p>将下载的压缩包解压至ik文件夹</p>
</li>
<li><p>重新启动elasticsearch</p>
</li>
</ol>
<h4 id="自定义关键字"><a href="#自定义关键字" class="headerlink" title="自定义关键字"></a>自定义关键字</h4><p>说明：对于一些特殊词条，例如：艾欧尼亚、弗雷尔卓德等，我们要规定他们为关键字，分词器不能对其进行分词</p>
<p>以ik分词器为例：</p>
<ol>
<li><p>进入<code>Elasticsearch根目录</code>—&gt;<code>plugins文件夹</code>—&gt;<code>ik文件夹</code>—&gt;<code>config文件夹</code> ，创建<code>自定义.dic</code>文件</p>
</li>
<li><p>往<code>自定义.dic</code>写入关键字，每个关键字占一行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">关键字1</span><br><span class="line">关键字2</span><br></pre></td></tr></table></figure>
</li>
<li><p>编辑<code>IKAnalyzer.cfgxml</code>文件，将<code>自定义.dic</code>配置为扩展字典</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">properties</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_dict&quot;</span>&gt;</span>自定义.dic<span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;ext_stopwords&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>重启Elasticsearch</p>
</li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>elastic stack</tag>
      </tags>
  </entry>
</search>
